<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>signalr on Radu Matei - Developer Evangelist</title>
    <link>http://radu-matei.github.io/categories/signalr/</link>
    <description>Recent content in signalr on Radu Matei - Developer Evangelist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Sep 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://radu-matei.github.io/categories/signalr/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started with SignalR Core</title>
      <link>http://radu-matei.github.io/blog/signalr-core/</link>
      <pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://radu-matei.github.io/blog/signalr-core/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ASP.NET SignalR is a library for ASP.NET developers that simplifies the process of adding real-time web functionality to applications. Real-time web functionality is the ability to have server code push content to connected clients instantly as it becomes available, rather than having the server wait for a client to request new data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 1.0.0 version of ASP.NET Core didn&amp;rsquo;t include a version of SignalR, so the team plans to release SignalR in the 1.2 iteration of the framework with some functionality that should make any SignalR developer happy: rewrite of the JavaScript client using TypeScript without the jQuery dependency, no more &lt;code&gt;GlobalHost&lt;/code&gt; and integration with the dependency injection engine from ASP.NET Core, remove the forever frame transport completely or support binary transfer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For the complete discussion for the SignalR planning, &lt;a href=&#34;https://github.com/aspnet/SignalR-Server/issues/196&#34;&gt;see this issue on the GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we are almost a year away from the official release of the framework, everything you are about to see is by no means production ready and will most likely suffer breaking changes over time. I will try to keep this article up-to-date with the various changes that will take place around SignalR over time.&lt;/p&gt;

&lt;p&gt;At this moment, there is a &lt;code&gt;0.2.0&lt;/code&gt; alpha version of &lt;a href=&#34;https://dotnet.myget.org/feed/aspnetcore-dev/package/nuget/Microsoft.AspNetCore.SignalR.Server&#34;&gt;&lt;code&gt;Microsoft.AspNetCore.SignalR.Server&lt;/code&gt;&lt;/a&gt; that makes it possible to use SignalR with an ASP.NET Core application, but it doesn&amp;rsquo;t implement the changes mentioned above just yet and you still use the same JavaScript client with the jQuery dependency.&lt;/p&gt;

&lt;h2 id=&#34;adding-nuget-config&#34;&gt;Adding NuGet.Config&lt;/h2&gt;

&lt;p&gt;In order to get access to the development packages of SignalR (of any package, really), we need to add a &lt;code&gt;NuGet.Config&lt;/code&gt; file that allows NuGet to get packages from multiple sources, in our case from the ASP.NET continous integration server from MyGet.&lt;/p&gt;

&lt;p&gt;In the same folder as &lt;code&gt;Program.cs&lt;/code&gt; and &lt;code&gt;Startup.cs&lt;/code&gt;, add a &lt;code&gt;NuGet.Config&lt;/code&gt; file with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;packageSources&amp;gt;
        &amp;lt;clear/&amp;gt;
            &amp;lt;add key=&amp;quot;aspnetcidev&amp;quot; value=&amp;quot;https://dotnet.myget.org/F/aspnetcore-ci-dev/api/v3/index.json&amp;quot;/&amp;gt;
            &amp;lt;add key=&amp;quot;api.nuget.org&amp;quot; value=&amp;quot;https://api.nuget.org/v3/index.json&amp;quot;/&amp;gt;
    &amp;lt;/packageSources&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-the-required-packages&#34;&gt;Adding the required packages&lt;/h2&gt;

&lt;p&gt;We need to add the following packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Microsoft.AspNetCore.Server.Kestrel&amp;quot;:&amp;quot;1.0.0&amp;quot;,
&amp;quot;Microsoft.AspNetCore.StaticFiles&amp;quot;: &amp;quot;1.0.0&amp;quot;,
&amp;quot;Microsoft.AspNetCore.SignalR.Server&amp;quot;: &amp;quot;0.2.0-*&amp;quot;,
&amp;quot;Microsoft.AspNetCore.WebSockets&amp;quot;: &amp;quot;0.2.0-*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-the-application&#34;&gt;Configure the application&lt;/h2&gt;

&lt;p&gt;Besides the usual configuration needed for a web application, we also need to add support for serving static files. If we use the current directory, the framework will search for a directory called &lt;code&gt;wwwroot&lt;/code&gt; and serve the file from there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        public static void Main(string[] args)
        {
            var host = new WebHostBuilder()
                .UseKestrel()
                .UseContentRoot(Directory.GetCurrentDirectory())
                .UseStartup&amp;lt;Startup&amp;gt;()
                .Build();

            host.Run();
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to add the required services in &lt;code&gt;Startup&lt;/code&gt;. In the &lt;code&gt;ConfigureServices&lt;/code&gt; method we need to &lt;code&gt;AddSignalR&lt;/code&gt;, with support for detailed errors in the browser console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void ConfigureServices(IServiceCollection services)
    {
        services.AddSignalR(options =&amp;gt; 
        {
            options.Hubs.EnableDetailedErrors = true;
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, in the &lt;code&gt;Configure&lt;/code&gt; method, we need to serve static files, use websockets and use SignalR:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public void Configure(IApplicationBuilder app)
    {
        app.UseStaticFiles();
        app.UseWebSockets();
        app.UseSignalR();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;At this moment, in order to get the framework to use websockets, you need to add &lt;code&gt;app.UseWebSockets()&lt;/code&gt;. If you don&amp;rsquo;t add the websockets support in your application, the transport will fall back to the next available transport.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&#34;https://github.com/aspnet/SignalR-Server/issues/220&#34;&gt;this GitHub issue&lt;/a&gt;, it is still not decided wether you will need to add the websockets reference as a separate operation or if it will be included in the &lt;code&gt;AddSignalR()&lt;/code&gt; call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, you can add &lt;code&gt;Hub&lt;/code&gt; classes and JavaScript clients in exactly the same way as for &lt;code&gt;2.2.0&lt;/code&gt; or &lt;code&gt;2.2.1&lt;/code&gt;. Note that in future releases this will most likely be different, as changes in the client start appearing.&lt;/p&gt;

&lt;h2 id=&#34;adding-a-hub-class&#34;&gt;Adding a Hub class&lt;/h2&gt;

&lt;p&gt;The very simple example here, as it is very common in the case of SignalR, a chat :)&lt;/p&gt;

&lt;p&gt;We have a &lt;code&gt;Connect&lt;/code&gt; method used to add a user to a connected users list and a &lt;code&gt;Send&lt;/code&gt; method that sends a message.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ChatHub : Hub
    {
        public static List&amp;lt;string&amp;gt; ConnectedUsers;

        public void Send(string originatorUser, string message)
        {
            Clients.All.messageReceived(originatorUser, message);
        }

        public void Connect(string newUser)
        {
            if (ConnectedUsers == null)
                ConnectedUsers = new List&amp;lt;string&amp;gt;();

            ConnectedUsers.Add(newUser);
            Clients.Caller.getConnectedUsers(ConnectedUsers);
            Clients.Others.newUserAdded(newUser);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;To keep things simple I didn&amp;rsquo;t use the &lt;code&gt;OnConnected&lt;/code&gt; override here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;adding-the-client&#34;&gt;Adding the client&lt;/h2&gt;

&lt;p&gt;We will now create a &lt;code&gt;wwwroot&lt;/code&gt; directory that will contain all of our static files.&lt;/p&gt;

&lt;p&gt;We add a new HTML file called &lt;code&gt;chat.html&lt;/code&gt; that will simply have an unordered list for the messages, a text input and a button. As you can see, the SignalR script used here is the latest one, &lt;code&gt;2.2.1&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Awesome Chat Application&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
        .userListDiv{
            float: right;
        }
    &amp;lt;/style&amp;gt;

    &amp;lt;ul id=&amp;quot;messages&amp;quot;&amp;gt;&amp;lt;/ul&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;messageBox&amp;quot; /&amp;gt;
    &amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;sendMessage&amp;quot; value=&amp;quot;Send Message!&amp;quot; /&amp;gt;
    &amp;lt;div class=&amp;quot;userListDiv&amp;quot;&amp;gt;
        &amp;lt;ul id=&amp;quot;userList&amp;quot;&amp;gt; &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script src=&amp;quot;http://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.1.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;http://ajax.aspnetcdn.com/ajax/signalr/jquery.signalr-2.2.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;signalr/hubs&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;chat.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also add a &lt;code&gt;chat.js&lt;/code&gt; file that contains the SignalR connection and client methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var userName = prompt(&amp;quot;Enter your name: &amp;quot;);
var chat = $.connection.chatHub;
chat.client.messageReceived = function (originatorUser, message) {
    $(&amp;quot;#messages&amp;quot;).append(&#39;&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&#39; + originatorUser + &#39;&amp;lt;/strong&amp;gt;: &#39; + message);
};

chat.client.getConnectedUsers = function (userList) {
    for (var i = 0; i &amp;lt; userList.length; i++)
        addUser(userList[i]);
};

chat.client.newUserAdded = function (newUser) {
    addUser(newUser);
}

$(&amp;quot;#messageBox&amp;quot;).focus();

$(&amp;quot;#sendMessage&amp;quot;).click(function () {
    chat.server.send(userName, $(&amp;quot;#messageBox&amp;quot;).val());
    $(&amp;quot;#messageBox&amp;quot;).val(&amp;quot;&amp;quot;);
    $(&amp;quot;#messageBox&amp;quot;).focus();
});

$(&amp;quot;#messageBox&amp;quot;).keyup(function (event) {
    if (event.keyCode == 13)
        $(&amp;quot;#sendMessage&amp;quot;).click();
});

function addUser(user){
    $(&amp;quot;#userList&amp;quot;).append(&#39;&amp;lt;li&amp;gt;&#39; + user + &#39;&amp;lt;/li&amp;gt;&#39;);
}

$.connection.hub.logging = true;
$.connection.hub.start().done(function () {
    chat.server.connect(userName);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, ask the user for a user name, define the client methods that display messages and users and define the behaviour when clicking the button (and for pressing Enter).&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a very simple example of integrating a very early preview of SignalR Core into an ASP.NET Core application. As the framework evolves, I will try to keep this example up to date.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>