<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency-injection on Radu Matei&#39;s Blog</title>
    <link>https://radu-matei.com/categories/dependency-injection/</link>
    <description>Recent content in Dependency-injection on Radu Matei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Aug 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://radu-matei.com/categories/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inject ASP.NET Core Dependencies from JSON files</title>
      <link>https://radu-matei.com/blog/aspnet-core-json-dependency-injection/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/aspnet-core-json-dependency-injection/</guid>
      <description>Table of Content  Introduction The need for registering services through a JSON file Adding the required packages Creating a dummy service How to inject an ITest service The JSON file The Service class Adding the services Testing the application The Startup class Conclusion  Introduction &amp;ldquo;Back in the days&amp;rdquo; of ASP.NET 4.x, each of the framework components (MVC, WebAPI, OWIN, SignalR) had its own dependency resolver and its own way of integrating with the framework.</description>
    </item>
    
    <item>
      <title>Introduction to ASP .NET Core MVC API</title>
      <link>https://radu-matei.com/blog/aspnet-core-api/</link>
      <pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/aspnet-core-api/</guid>
      <description>Table of Content  Introduction Adding the MVC services to our application Adding the Post class Creating an IPostRepository interface Creating an in-memory implementation of IPostRepository The PostController class Registering the repository service in Startup Startup.cs Testing the application Conclusion  Introduction Up to this point, we have been learning about .NET Core and VS Code, about ASP .NET Core, the Startup class, Routing and how to use JSON Configuration.</description>
    </item>
    
    <item>
      <title>ASP .NET Core JSON Configuration and Dependency Injection</title>
      <link>https://radu-matei.com/blog/aspnet-core-configuration-greeting/</link>
      <pubDate>Sat, 23 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/aspnet-core-configuration-greeting/</guid>
      <description>Table of Content  Introduction Using the ASP .NET Core JSON Configuration Provider Building the configurable Greeting service Making use of ASP .NET Core Dependency Injection Conclusion  Introduction In the previous versions of ASP .NET, any configuration setting or parameter you needed was added in web.config (complete description of the old web.config file), or added in a separate XML file and referenced in web.config (for scenarios like database connection strings, or storing APIs access tokens).</description>
    </item>
    
  </channel>
</rss>