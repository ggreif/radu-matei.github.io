<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>radu&#39;s blog</title>
    <link>https://radu-matei.com/</link>
    <description>Recent content on radu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://twitter.com/matei_radu&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;Radu M&lt;/a&gt; 2021</copyright>
    <lastBuildDate>Sun, 10 Jan 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://radu-matei.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    
    <item>
      <title>A practical guide to WebAssembly memory</title>
      <link>https://radu-matei.com/blog/practical-guide-to-wasm-memory/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/practical-guide-to-wasm-memory/</guid>
      <description>Memory in WebAssembly is one of the topics that creates confusion for newcomers, particularly for those with experience in languages with memory management features like garbage collection, such as JavaScript, Go, or Java. In this article we explore using memory in WebAssembly in various scenarios - passing JavaScript arrays to Rust and AssemblyScript modules, checking for some basic memory leaks using Valgrind, or exchanging strings between runtimes and modules using Wasmtime.</description>
    </item>
    
    <item>
      <title>A simple WebAssembly linker in JavaScript</title>
      <link>https://radu-matei.com/blog/a-simple-wasm-linker-js/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/a-simple-wasm-linker-js/</guid>
      <description>An experimental JavaScript library that helps instantiating WebAssembly modules with imports by providing functionality to link JavaScript objects as imports, as well as automatically perform name based resolution for linking entire modules.</description>
    </item>
    
    <item>
      <title>TensorFlow inferencing using WebAssembly and WASI</title>
      <link>https://radu-matei.com/blog/tensorflow-inferencing-wasi/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/tensorflow-inferencing-wasi/</guid>
      <description>In this article, we experiment with building a Rust program that performs image classification using the MobileNet V2 TensorFlow model, compile it to WebAssembly, and instantiate the module using two WebAssembly runtimes that use the WebAssembly System Interface (WASI), the native NodeJS WASI runtime, and Wasmtime. A special interest is given to writing model and image data into the moduleâ€™s linear memory, with implementations in both JavaScript and Rust. Finally, a simple prediction API is exemplified running on top of the Wasmtime runtime, and some limitations of this approach are discussed.</description>
    </item>
    
    <item>
      <title>Towards sockets and networking in WebAssembly and WASI</title>
      <link>https://radu-matei.com/blog/towards-sockets-networking-wasi/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/towards-sockets-networking-wasi/</guid>
      <description>In this article we look at the current state of the networking API in WASI, and add a minimal implementation together with socket clients in AssemblyScript and Rust (with an upfront disclaimer that this should definitely not be used for anything other than experimentation).</description>
    </item>
    
    <item>
      <title>Introduction to Brigade - video demo</title>
      <link>https://radu-matei.com/blog/brigade-intro/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/brigade-intro/</guid>
      <description>Video demonstration of getting started with Brigade</description>
    </item>
    
  </channel>
</rss>
