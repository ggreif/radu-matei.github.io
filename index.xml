<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>radu&#39;s blog</title>
    <link>https://radu-matei.com/</link>
    <description>Recent content on radu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://twitter.com/matei_radu&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;Radu Matei&lt;/a&gt; 2021</copyright>
    <lastBuildDate>Thu, 16 Dec 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://radu-matei.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    
    <item>
      <title>Introduction to WebAssembly components</title>
      <link>https://radu-matei.com/blog/intro-wasm-components/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/intro-wasm-components/</guid>
      <description>WebAssembly and WASI show great promise for the future of computing outside the browser, and the WebAssembly component model aims to improve the portability, cross-language, and composition story for Wasm. This article explains the goals of the component model, and showcases how to use tooling from the Bytecode Alliance to build and consume such components.</description>
    </item>
    
    <item>
      <title>Neural network inferencing  for PyTorch and TensorFlow with ONNX, WebAssembly System Interface, and WASI NN</title>
      <link>https://radu-matei.com/blog/wasi-nn-onnx/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wasi-nn-onnx/</guid>
      <description>WASI NN is a proposal that allows WebAssembly guest modules running outside the browser to perform neural network inferencing by using host-provided implementations that can leverage CPU multi-threading, host optimizations, or hardware devices such as GPUs or TPUs. This article explores the goals of WASI NN, existing implementations, and details a new experimental implementation targeting ONNX, the Open Neural Network Exchange , which allows the either usage of models built with PyTorch or TensorFlow from guest WebAssembly modules.</description>
    </item>
    
    <item>
      <title>Using Azure services from WebAssembly modules</title>
      <link>https://radu-matei.com/blog/using-azure-services-wasi/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/using-azure-services-wasi/</guid>
      <description>With WAGI, the WebAssembly Gateway Interface, it is easier than ever to build microservices using WebAssembly. In this article, we explore building Wasm modules that use Azure services and how to run them using WAGI.</description>
    </item>
    
    <item>
      <title>Updates on WAGI, the WebAssembly Gateway Interface</title>
      <link>https://radu-matei.com/blog/wagi-updates/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wagi-updates/</guid>
      <description>New features such as pulling from container registries and outbound HTTP connections are now part of WAGI.</description>
    </item>
    
    <item>
      <title>An experimental outbound HTTP library for the WebAssembly System Interface</title>
      <link>https://radu-matei.com/blog/wasi-experimental-http/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wasi-experimental-http/</guid>
      <description>Send HTTP requests from Rust and AssemblyScript Wasm modules running in Wasmtime</description>
    </item>
    
  </channel>
</rss>
