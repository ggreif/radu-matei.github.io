<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wasm on radu&#39;s blog</title>
    <link>https://radu-matei.com/tags/wasm/</link>
    <description>Recent content in wasm on radu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://twitter.com/matei_radu&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;Radu M&lt;/a&gt; 2020</copyright>
    <lastBuildDate>Fri, 16 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://radu-matei.com/tags/wasm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Towards sockets and networking in WebAssembly and WASI</title>
      <link>https://radu-matei.com/blog/towards-sockets-networking-wasi/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/towards-sockets-networking-wasi/</guid>
      <description>In this article we look at the current state of the networking API in WASI, and add a minimal implementation together with socket clients in AssemblyScript and Rust (with an upfront disclaimer that this should definitely not be used for anything other than experimentation).</description>
    </item>
    
    <item>
      <title>Getting started with NodeJS and the WebAssembly System Interface</title>
      <link>https://radu-matei.com/blog/nodejs-wasi/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/nodejs-wasi/</guid>
      <description>NodeJS recently added experimental support for executing WebAssembly modules using WASI, or the WebAssembly System Interface. In this article we explore how to get started with the WASI sandbox and writing various modules we can execute, in Rust, or AssemblyScript.</description>
    </item>
    
    <item>
      <title>Writing a simple WASM API layer using interface types and Wasmtime</title>
      <link>https://radu-matei.com/blog/wasm-api-witx/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wasm-api-witx/</guid>
      <description>In this short article we explore how to get started with WebAssembly interface types by defining a simple API layer, then implementing that using Wiggle and Wasmtime</description>
    </item>
    
    <item>
      <title>A beginner&#39;s guide to adding a new WASI syscall in Wasmtime</title>
      <link>https://radu-matei.com/blog/adding-wasi-syscall/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/adding-wasi-syscall/</guid>
      <description>In this article, we explore how to add a new system call to WASI, the WebAssembly System Interface, and implement it in Wasmtime</description>
    </item>
    
    <item>
      <title>Securely distributing and signing WebAssembly modules using OCI and TUF</title>
      <link>https://radu-matei.com/blog/wasm-oci-tuf/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wasm-oci-tuf/</guid>
      <description>Attacks on software repositories happen all the time, and any future WebAssembly repository and client tooling should be prepared to mitigate these attacks. In this article we will explore a minimum security model for WebAssembly registries and client tooling based on The Update Framework, and how to integrate this model when distributing WebAssembly modules using OCI registries.</description>
    </item>
    
    <item>
      <title>Distributing WebAssembly modules using OCI registries</title>
      <link>https://radu-matei.com/blog/wasm-to-oci/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wasm-to-oci/</guid>
      <description>WebAssembly (WASM) is a binary instruction format for a stack-based virtual machine. In familiar terms, WASM is used as a compilation target for various programming languages (C, C++, Rust, or Golang, for example), generating a compact binary with a known format. Mozilla Developer Network describes WebAssembly as having huge implications for the web platform — it provides a way to run code written in multiple languages on the web at near native speed, with client apps running on the web that previously couldn’t have done so.</description>
    </item>
    
    <item>
      <title>Rendering Helm templates in the browser, with WebAssembly</title>
      <link>https://radu-matei.com/blog/helm-wasm/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/helm-wasm/</guid>
      <description>I&amp;rsquo;ve been trying to find a weekend to play around with Web Assembly for at least a couple of months now - I had previously read the hello world examples for both Go and Rust, but never had the time to actually try things out. So I decided to take a piece of real world Go code, that is used today in Helm, and see if I can get it to execute in the browser - I chose to replicate a simpler version of helm template, where you input the template, values file, and metadata in the web page, and the rendered template gets printed out.</description>
    </item>
    
  </channel>
</rss>