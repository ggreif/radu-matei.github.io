<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>radu&#39;s blog</title>
    <link>https://radu-matei.com/</link>
    <description>Recent content on radu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://twitter.com/matei_radu&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;Radu M&lt;/a&gt; 2021</copyright>
    <lastBuildDate>Mon, 10 May 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://radu-matei.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    
    <item>
      <title>From (C)Go to Rust: A practical guide to building shared and static libraries, linking, and FFI</title>
      <link>https://radu-matei.com/blog/from-go-to-rust-static-linking-ffi/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/from-go-to-rust-static-linking-ffi/</guid>
      <description>In this article we will explore how to build shared and static libraries in Go, and import them in Rust.</description>
    </item>
    
    <item>
      <title>Random WSL tips &amp; tricks</title>
      <link>https://radu-matei.com/blog/random-wsl-tips/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/random-wsl-tips/</guid>
      <description>If you&amp;rsquo;re getting started with using WSL2, here are a few tips for making the most of your experience - from running Linux GUI apps, to accessing the Linux filesystem from Windows Explorer or exporting your distribution.</description>
    </item>
    
    <item>
      <title>Version control for your WSL distribution with a Dockerfile</title>
      <link>https://radu-matei.com/blog/wsl-versioned-filesystem-docker/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wsl-versioned-filesystem-docker/</guid>
      <description>In this article, we will explore how to build a WSL distribution using a Dockerfile, allowing us to version our entire WSL configuration.</description>
    </item>
    
    <item>
      <title>Securely distributing and signing WebAssembly modules using OCI and TUF</title>
      <link>https://radu-matei.com/blog/wasm-oci-tuf/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wasm-oci-tuf/</guid>
      <description>Attacks on software repositories happen all the time, and any future WebAssembly repository and client tooling should be prepared to mitigate these attacks. In this article we will explore a minimum security model for WebAssembly registries and client tooling based on The Update Framework, and how to integrate this model when distributing WebAssembly modules using OCI registries.</description>
    </item>
    
    <item>
      <title>Distributing WebAssembly modules using OCI registries</title>
      <link>https://radu-matei.com/blog/wasm-to-oci/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wasm-to-oci/</guid>
      <description>WebAssembly (WASM) is a binary instruction format for a stack-based virtual machine. In familiar terms, WASM is used as a compilation target for various programming languages (C, C++, Rust, or Golang, for example), generating a compact binary with a known format. Mozilla Developer Network describes WebAssembly as having huge implications for the web platform — it provides a way to run code written in multiple languages on the web at near native speed, with client apps running on the web that previously couldn’t have done so.</description>
    </item>
    
  </channel>
</rss>
